<button
  id="theme-toggle-button"
  aria-label="Switch to dark theme"
  class="relative z-0 p-1.5 bg-neutral-950/5 text-neutral-950 dark:bg-white/10 dark:text-white rounded-md"
>
  <svg data-theme-icon="light" viewBox="0 0 28 28" fill="none" class="size-7 hidden">
    <circle cx="14" cy="14" r="3.5" stroke="currentColor"></circle>
    <path d="M14 8.5V6.5" stroke="currentColor" stroke-linecap="round"></path>
    <path
      d="M17.889 10.1115L19.3032 8.69727"
      stroke="currentColor"
      stroke-linecap="round"></path>
    <path d="M19.5 14L21.5 14" stroke="currentColor" stroke-linecap="round"></path>
    <path
      d="M17.889 17.8885L19.3032 19.3027"
      stroke="currentColor"
      stroke-linecap="round"></path>
    <path d="M14 21.5V19.5" stroke="currentColor" stroke-linecap="round"></path>
    <path
      d="M8.69663 19.3029L10.1108 17.8887"
      stroke="currentColor"
      stroke-linecap="round"></path>
    <path d="M6.5 14L8.5 14" stroke="currentColor" stroke-linecap="round"></path>
    <path
      d="M8.69663 8.69711L10.1108 10.1113"
      stroke="currentColor"
      stroke-linecap="round"></path>
  </svg>
  <svg data-theme-icon="dark" viewBox="0 0 28 28" fill="none" class="size-7">
    <path
      d="M10.5 9.99914C10.5 14.1413 13.8579 17.4991 18 17.4991C19.0332 17.4991 20.0176 17.2902 20.9132 16.9123C19.7761 19.6075 17.109 21.4991 14 21.4991C9.85786 21.4991 6.5 18.1413 6.5 13.9991C6.5 10.8902 8.39167 8.22304 11.0868 7.08594C10.7089 7.98159 10.5 8.96597 10.5 9.99914Z"
      stroke="currentColor"
      stroke-linejoin="round"></path>
  </svg>
</button>

<style>
  [data-theme-icon] {
    display: block;
  }
</style>

<script data-astro-rerun is:inline>
  (function () {
    let theme = localStorage.getItem("currentTheme");
    const prefersDark = window.matchMedia(
      "(prefers-color-scheme: dark)",
    ).matches;

    if (theme !== "light" && theme !== "dark") {
      theme = prefersDark ? "dark" : "light";
    }

    if (theme === "dark") {
      document.documentElement.classList.add("dark");
      document.documentElement.classList.remove("light");
    } else {
      document.documentElement.classList.add("light");
      document.documentElement.classList.remove("dark");
    }
    localStorage.setItem("currentTheme", theme);
  })();
</script>

<script>
  type Theme = "light" | "dark";

  function getInitialTheme(): Theme {
    return (localStorage.getItem("currentTheme") as Theme) || "light";
  }

  function applyThemeAndButtonState(theme: Theme): void {
    const lightIcon = document.querySelector<HTMLElement>('[data-theme-icon="light"]');
    const darkIcon = document.querySelector<HTMLElement>('[data-theme-icon="dark"]');
    const toggleButton = document.getElementById("theme-toggle-button");

    if (!lightIcon || !darkIcon || !toggleButton) {
      console.error("Theme toggle elements not found");
      return;
    }

    if (theme === "dark") {
      document.documentElement.classList.add("dark");
      document.documentElement.classList.remove("light");
      lightIcon.style.display = "block";
      darkIcon.style.display = "none";
      toggleButton.setAttribute("aria-label", "Switch to light theme");
    } else {
      document.documentElement.classList.add("light");
      document.documentElement.classList.remove("dark");
      lightIcon.style.display = "none";
      darkIcon.style.display = "block";
      toggleButton.setAttribute("aria-label", "Switch to dark theme");
    }
    localStorage.setItem("currentTheme", theme);
  }

  function initThemeToggle(): void {
    const toggleButton = document.getElementById("theme-toggle-button");
    if (!toggleButton) return;

    const initialTheme = getInitialTheme();
    applyThemeAndButtonState(initialTheme);

    toggleButton.addEventListener("click", () => {
      const currentTheme = localStorage.getItem("currentTheme") as Theme;
      const newTheme = currentTheme === "light" ? "dark" : "light";
      applyThemeAndButtonState(newTheme);
    });
  }

  document.addEventListener("DOMContentLoaded", initThemeToggle);
  document.addEventListener("astro:page-load", initThemeToggle);

  if (
    document.readyState === "interactive" ||
    document.readyState === "complete"
  ) {
    if (!(window as any).__themeToggleInitialized) {
      initThemeToggle();
      (window as any).__themeToggleInitialized = true;
    }
  }
</script>
